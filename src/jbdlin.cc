// jbdlin.cc is part of the 
// numerical library jbnumlib included with the 
// CHIRON ChPT at two loops program collection
// Copyright (C) 2017 Johan Bijnens, v1.0
// CHIRON is licenced under the GNU GPL version 2 or later,
// see COPYING for details.
// Please respect the Guidelines, see GUIDELINES for details.

// general complex Li_n for n=2,3,4
// for method see arxiv:1601.02649 section 5

#include<iostream>
#include<cmath>
#include<complex>
#include "jbnumlib.h"

typedef std::complex<double> dcomplex;

// note not all components are used
dcomplex jbdli2(dcomplex x){
  const double zeta2 = M_PI*M_PI/6.;
  const double Li2one[21] =
     {0.,
      1.3888888888888888888E-2,
       - 6.9444444444444444444E-5,
      7.8735197782816830435E-7,
       - 1.1482216343327454438E-8,
      1.8978869988970999072E-10,
       - 3.3873013709535212723E-12,
      6.3726364431831803965E-14,
       - 1.2462059912950672304E-15,
      2.5105444608999545509E-17,
       - 5.1782588060906235072E-19,
      1.0887357368300848844E-20,
       - 2.3257441143020872234E-22,
      5.0351952131473895608E-24,
       - 1.1026499294381215333E-25,
      2.4386585509007344734E-27,
       - 5.4401426788562523155E-29,
      1.2228340131217352116E-30,
       - 2.7672634689679505842E-32,
      6.3000905918320139487E-34,
     - 1.4420868388418475210E-35};
const double Li2zero[21] =
  {0.,
      2.7777777777777777777E-2,
       - 2.7777777777777777777E-4,
      4.7241118669690098261E-6,
       - 9.1857730746619635508E-8,
      1.8978869988970999072E-9,
       - 4.0647616451442255268E-11,
      8.9216910204564525552E-13,
       - 1.9939295860721075687E-14,
      4.5189800296199181916E-16,
       - 1.0356517612181247014E-17,
      2.3952186210261867457E-19,
       - 5.5817858743250093362E-21,
      1.3091507554183212858E-22,
       - 3.0874198024267402932E-24,
      7.3159756527022034203E-26,
       - 1.7408456572340007409E-27,
      4.1576356446138997196E-29,
       - 9.9621484882846221031E-31,
      2.3940344248961653005E-32,
   - 5.7683473553673900842E-34};

  if((abs(1.-x) < 1.) && (real(x)>0.5)){
    dcomplex z = -log(x);
    dcomplex z2 = z*z;
    dcomplex z3 = z;
    dcomplex dli2 = zeta2-z-0.25*z2+z*log(z);
    for(int i=1; i<13;i++){
      z3  *= z2;
      dli2 += Li2one[i]*z3;
    }
    return dli2;
  }
  dcomplex z=x;
  dcomplex dli2e = 0.;
  double aa = 1.;
  if(abs(x) > 1.){
    z = 1./x;
    dli2e = -zeta2-0.5*pow(log(-z),2);
    aa = -1.;
  }
  z = -log(1.-z);
  dcomplex z2 = z*z;
  dcomplex z3 = z;
  dcomplex dli2 = z-0.25*z2;
  for(int i=1;i< 13;i++){
    z3 *= z2;
    dli2 += Li2zero[i]*z3;
  }
  return dli2e+aa*dli2;
}

dcomplex jbdli3(dcomplex x){
  const double zeta2 = M_PI*M_PI/6.;
  const double zeta3 = 1.20205690315959428543;
  const double Li3one[21] =
     {0.,
       - 3.4722222222222222222E-3,
      1.1574074074074074074E-5,
       - 9.8418997228521038044E-8,
      1.1482216343327454438E-9,
       - 1.5815724990809165893E-11,
      2.4195009792525151945E-13,
       - 3.9828977769894877478E-15,
      6.9233666183059290580E-17,
       - 1.2552722304499772754E-18,
      2.3537540027684652305E-20,
       - 4.5363989034586870184E-22,
      8.9451696703926431671E-24,
       - 1.7982840046954962717E-25,
      3.6754997647937384443E-27,
       - 7.6208079715647952295E-29,
      1.6000419643694859751E-30,
       - 3.3967611475603755879E-32,
      7.2822722867577646953E-34,
       - 1.5750226479580034871E-35,
      3.4335400924805893358E-37};
const double Li3zero[41] =
  {    1.E+0,
       - 3.75E-1,
      7.8703703703703703703E-2,
       - 8.6805555555555555555E-3,
      1.2962962962962962962E-4,
      8.1018518518518518518E-5,
       - 3.4193571608537594932E-6,
       - 1.3286564625850340136E-6,
      8.6608717561098513479E-8,
      2.5260875955320399764E-8,
       - 2.1446944683640647609E-9,
       - 5.1401106220129789153E-10,
      5.2495821146008294363E-11,
      1.0887754406636318375E-11,
       - 1.2779396094493695305E-12,
       - 2.3698241773087452099E-13,
      3.1043578879654622942E-14,
      5.2617586299125060841E-15,
       - 7.5384795499492653659E-16,
       - 1.1862322577752285253E-16,
      1.8316979965491383382E-17,
      2.7068171031837350151E-18,
       - 4.4554338978296388264E-19,
       - 6.2375484922556946503E-20,
      1.0851521534874534913E-20,
      1.4491174866036081930E-21,
       - 2.6466339754458990334E-22,
       - 3.3897653488510104721E-23,
      6.4640477336033108890E-24,
      7.9758344896024124242E-25,
       - 1.5809178790287483355E-25,
       - 1.8861499729622868193E-26,
      3.8715536638418473303E-27,
      4.4801175002345607304E-28,
       - 9.4930338719118361264E-29,
       - 1.0682813809077381224E-29,
      2.3304478936103051860E-30,
      2.5560775726519754080E-31,
       - 5.7274216061372596844E-32,
       - 6.1347132137964235825E-33,
      1.4090808604068944840E-33};

  if((abs(1.-x) < 1.) && (real(x)>0.5)){
    dcomplex z = -log(x);
    dcomplex z2 = z*z;
    dcomplex z3 = z2;
    dcomplex dli3 = zeta3-zeta2*z+0.75*z2+z2*z/12.-0.5*z2*log(z);
    for(int i=1; i<13;i++){
      z3  *= z2;
      dli3 += Li3one[i]*z3;
    }
    return dli3;
  }
  dcomplex z=x;
  dcomplex dli3e = 0.;
  if(abs(x) > 1.){
    z = 1./x;
    dcomplex logz = log(-z);
    dli3e = zeta2*logz+pow(logz,3)/6.;
  }
  z = -log(1.-z);
  dcomplex z1 = 1.;
  dcomplex dli3 = 0.;
  for(int i=0;i< 22;i++){
    z1 *= z;
    dli3 += Li3zero[i]*z1;
  }
  return dli3e+dli3;
}
dcomplex jbdli4(dcomplex x){
  const double zeta2 = M_PI*M_PI/6.;
  const double zeta3 = 1.20205690315959428543;
  const double zeta4 = M_PI*M_PI*M_PI*M_PI/90.;
  const double Li4one[21] =
     {0.,
      6.9444444444444444444E-4,
       - 1.6534391534391534391E-6,
      1.0935444136502337560E-8,
       - 1.0438378493934049489E-10,
      1.2165942300622435302E-12,
       - 1.6130006528350101296E-14,
      2.3428810452879339693E-16,
       - 3.6438771675294363463E-18,
      5.9774868116665584545E-20,
       - 1.0233713055515066219E-21,
      1.8145595613834748073E-23,
       - 3.3130258038491270989E-25,
      6.2009793265361940404E-27,
       - 1.1856450854173349820E-28,
      2.3093357489590288574E-30,
       - 4.5715484696271027862E-32,
      9.1804355339469610484E-34,
       - 1.8672493042968627423E-35,
      3.8415186535561060663E-37,
      - 7.9849769592571845020E-39};

  const double Li4zero[41] =
    {  1.E+0,
       - 4.375E-1,
      1.1651234567901234567E-1,
       - 1.9820601851851851851E-2,
      1.9279320987654320987E-3,
       - 3.1057098765432098765E-5,
       - 1.5624009114857835298E-5,
      8.4851235467732066371E-7,
      2.2909616603189711445E-7,
       - 2.1832614218526916939E-8,
       - 3.8828248791720155722E-9,
      5.4462921032203321182E-10,
      6.9608052106827254078E-11,
       - 1.3375737686445215199E-11,
       - 1.2784852685266571604E-12,
      3.2605628580248922428E-13,
      2.3647571168618257362E-14,
       - 7.9231351220311617024E-15,
       - 4.3452915709984187250E-16,
      1.9236270062535920116E-16,
      7.8124143331959546707E-18,
       - 4.6718038448036555203E-18,
       - 1.3435344329812847856E-19,
      1.1356826851347343244E-19,
      2.1152756202432586847E-21,
       - 2.7642026334746517388E-21,
       - 2.7068176608240064256E-23,
      6.7372044828628572143E-23,
      1.3287265456683822975E-25,
       - 1.6443773056367826467E-24,
      8.2836058999339341109E-27,
      4.0190848495069350699E-26,
       - 4.5757138444848790382E-28,
       - 9.8364109094615127758E-28,
      1.6900339556037851067E-29,
      2.4104805563059808504E-29,
       - 5.4266127056714182501E-31,
       - 5.9142429588741767864E-31,
      1.6232110901087370772E-32,
      1.4527595437740275946E-32,
	 - 4.6538993700257370441E-34};

  if((abs(1.-x) < 1.) && (real(x)>0.5)){
    dcomplex z = -log(x);
    dcomplex z2 = z*z;
    dcomplex z3 = z2*z;
    dcomplex z4 = z2*z2;
    dcomplex dli4 = zeta4-zeta3*z+0.5*zeta2*z2-11./36.*z3
      -z4/48.+1./6.*z3*log(z);
    for(int i=1; i<12;i++){
      z3  *= z2;
      dli4 += Li4one[i]*z3;
    }
    return dli4;
  }
  dcomplex z=x;
  dcomplex dli4e = 0.;
  double aa = 1.;
  if(abs(x) > 1.){
    z = 1./x;
    dcomplex logz = log(-z);
    dcomplex logz2 = logz*logz;
    aa = -1.;
    dli4e = -7./4.*zeta4-0.5*zeta2*logz2-logz2*logz2/24.;
  }
  z = -log(1.-z);
  dcomplex z1 = 1.;
  dcomplex dli4 = 0.;
  for(int i=0;i< 24;i++){
    z1 *= z;
    dli4 += Li4zero[i]*z1;
  }
  return dli4e+aa*dli4;
}
